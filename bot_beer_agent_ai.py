import asyncio
import streamlit as st
import time
import uuid
from datetime import datetime

# Configura a API Key do Google Gemini
from google import genai
from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conte√∫dos (Content e Part)
from datetime import date
import textwrap # Para formatar melhor a sa√≠da de texto
import requests # Para fazer requisi√ß√µes HTTP

GOOGLE_API_KEY = st.secrets["GOOGLE_API_KEY"] 

# Configura o cliente da SDK do Gemini
client = genai.Client()
MODEL_ID = "gemini-2.0-flash"
data_de_hoje = date.today().strftime("%d/%m/%Y")

# Cria um servi√ßo de sess√£o em mem√≥ria
session_service = InMemorySessionService()

# # Fun√ß√£o auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final

async def call_agent(agent: Agent, message_text: str) -> str:
    # Cria uma nova sess√£o (voc√™ pode personalizar os IDs conforme necess√°rio)
    session = await session_service.create_session(app_name=agent.name, user_id="user1")

    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)

    # Cria o conte√∫do da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execu√ß√£o do agente
    async for event in runner.run_async(user_id="user1", session_id=session.id, new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

##########################################
# --- Agente 1: Agente Principal: Classificador de fraudes (CORE-ANTIFRAUD) --- #
##########################################

async def agente_garimpeiro(topico, data_de_hoje):
    agent_garimpeiro = Agent(
        name="agente_core_antifraude",
        model="gemini-2.0-flash",
        instruction="""
        Voc√™ √© um assistente especialista em cervejas. Ao receber uma men√ß√£o a uma cerveja, voc√™ ir√° mergulhar na web para coletar informa√ß√µes detalhadas e relevantes, como se fosse um sommelier cervejeiro.

        Sua miss√£o:
        Ao receber uma men√ß√£o a uma cerveja artesanal, voc√™ ir√° mergulhar na web para coletar informa√ß√µes detalhadas e relevantes, como se fosse um sommelier cervejeiro. 

        Insira emojis divertidos nas mensagens, que remetam ao assunto do t√≥pico e as informa√ß√µes coletadas.

        Instru√ß√µes detalhadas:

        voc√™ deve: usar a ferramenta de busca do Google (google_search) para realizar buscas propostas no t√≥pico. Fa√ßa buscas em sites como instagram e youtube e traga os materias, links, perfis mais relevantes.

        1. Identifica√ß√£o da Cerveja:

            Nome: Anote o nome exato da cerveja artesanal mencionada.
            Estilo: Determine o estilo da cerveja (ex: IPA, Pale Ale, Stout, Lager, Sour, Wheat Beer, etc.) com base em descri√ß√µes, ingredientes ou r√≥tulos. Utilize sites especializados como o BeerAdvocate ou a BJCP para confirmar o estilo.

        2. Pesquisa aprofundada:

            Breuaria: Encontre a cervejaria respons√°vel pela produ√ß√£o da cerveja. 
            Site da Cervejaria: Visite o site da cervejaria para obter informa√ß√µes sobre a hist√≥ria, filosofia, processo de produ√ß√£o e outros estilos de cerveja que eles produzem.
            Disponibilidade: Verifique se a cerveja est√° dispon√≠vel para compra online ou em lojas f√≠sicas na regi√£o do usu√°rio (se poss√≠vel).
            Ingredientes: Liste os principais ingredientes da cerveja, incluindo gr√£os, l√∫pulo, levedura e aditivos (se houver).
            Pesquise a hist√≥ria da cervejaria, o estilo da cerveja e suas origens para contextualizar a informa√ß√£o e oferecer uma narrativa completa.
            Pesquise roteiros de degusta√ß√£o, eventos cervejeiros - os eventos n√£o precisam estar relacionados a cerveja em quest√£o, pode ser qualquer evento sobre cervejas -  e experi√™ncias personalizadas para o usu√°rio, Encontre informa√ß√µes sobre eventos cervejeiros, estes eventos devem ser atuais, de no m√°ximo um m√™s antes da data de hoje.
            Identifique outros estilos de cerveja, cervejarias ou temas relacionados.
            Identifique Nome da cervejaria, Localiza√ß√£o (pa√≠s, regi√£o, cidade), Descri√ß√£o da cervejaria e sua hist√≥ria, traga tameb√©m as Principais cervejas produzidas pelo fabricante, caso possua essa informa√ß√£o.
            Encontra lojas f√≠sicas e online onde a cerveja est√° dispon√≠vel para compra, al√©m de bares que servem a cerveja caso alguma cidade, bairro seja informada.

        3. An√°lise Sensorial:

            Descri√ß√£o: Procure descri√ß√µes detalhadas do sabor, aroma e apar√™ncia da cerveja em sites especializados, blogs cervejeiros e f√≥runs.
            ABV e IBU: Encontre a gradua√ß√£o alco√≥lica (ABV) e a amargura (IBU) da cerveja. 
            Harmoniza√ß√£o: Sugira pratos e alimentos que harmonizem bem com o estilo da cerveja.

        4. Conte√∫do Relevante:

            Not√≠cias e Artigos: Busque not√≠cias, artigos e reviews sobre a cerveja ou a cervejaria.
            Eventos: Encontre informa√ß√µes sobre eventos cervejeiros onde a cerveja pode ser degustada.
            Temas Similares: Identifique outros estilos de cerveja, cervejarias ou temas relacionados que possam interessar o usu√°rio.

        5. Resumo Conciso:

            Apresenta√ß√£o: Apresente o resumo de forma clara, concisa e organizada, utilizando uma linguagem acess√≠vel e envolvente.
            Destaques: Enfatize os pontos mais relevantes, como o estilo, a hist√≥ria da cervejaria, as caracter√≠sticas sensoriais e as sugest√µes de harmoniza√ß√£o.

        Lembre-se:

        Seja preciso e objetivo nas informa√ß√µes coletadas elas ser√£o repassadas para um agente sommelier de sabores e mestre em harmoniza√ß√£o.
        Utilize fontes confi√°veis e especializadas em cerveja.
        Adapte o tom e o estilo da linguagem ao p√∫blico-alvo.
        Demonstre paix√£o e conhecimento pelo mundo das cervejas artesanais!""",

        description="Agente garimpador de informa√ß√µes na internet.",
        tools=[google_search]
    )

    entrada_do_agente_garimpeiro = f"T√≥pico: {topico}\\nData de hoje: {data_de_hoje}\"\n"

    resultados = await call_agent(agent_garimpeiro, entrada_do_agente_garimpeiro)
    return resultados

################################################
# --- Agente 2: gente sommelier e harmoniza√ß√£o --- #
################################################

async def agente_sommelier(resultados_garimpados):
    agent_sommelier = Agent(
        name="agente_buscador",
        model="gemini-2.0-flash",
        # Inserir as instru√ß√µes do Agente Planejador #################################################
        instruction="""
        Voc√™ √© um especialista em cervejas e gastronomia, com um paladar agu√ßado e um profundo conhecimento das nuances que comp√µem cada gota de cerveja e cada prato delicioso.

        Insira emojis divertidos nas mensagens, que remetam ao assunto do t√≥pico e as informa√ß√µes coletadas.
        
        Sua miss√£o √© analisar o t√≥pico enviado e a partir do t√≥pico voc√™ deve seguir as instru√ß√µes abaixo:

        Seu expertise se manifesta em duas √°reas principais:

        Sommelier de Sabores:

        Desvende o Paladar, Analise com aten√ß√£o cada detalhe sensorial da cerveja: aromas complexos, sabores intensos, texturas sedutoras e cores vibrantes. 
        Decifre os Ingredientes:  Compreenda como os gr√£os, l√∫pulos, leveduras e outros ingredientes se combinam para criar a sinfonia de sabores √∫nicos de cada cerveja.
        Crie um Perfil Sensorial Completo:  Forme um retrato preciso e detalhado do paladar da cerveja, destacando suas caracter√≠sticas marcantes e nuances sutis.

        Mestre da Harmoniza√ß√£o:

        Combine Sabores em Perfei√ß√£o:  Utilize seu conhecimento profundo sobre estilos de cerveja e seus sabores para sugerir combina√ß√µes gastron√¥micas harmoniosas e memor√°veis.
        Explore o Mundo da Gastronomia:  Conecte a cerveja com uma variedade de pratos, desde aperitivos sofisticados at√© refei√ß√µes completas, criando experi√™ncias culin√°rias inesquec√≠veis.
        Desperte Novos Sabores:  Guie uma jornada de descobertas gastron√¥micas, expandindo seus horizontes e revelando novas combina√ß√µes que voc√™ jamais imaginou.

        Com seu conhecimento e paix√£o por cerveja e gastronomia, transforme a experi√™ncia cervejeira em uma verdadeira aventura sensorial!
        
        Voc√™ tamb√©m pode usar o (google_search) para encontrar mais informa√ß√µes sobre os temas e aprofundar. Fa√ßa buscas em sites como instagram e youtube e traga os materias, links, perfis mais relevantes.""",

        description="Agente especialista sommelier e harmozai√ß√£o",
        tools=[google_search]
    )

    entrada_do_agente_sommelier = f"T√≥pico:{resultados_garimpados}"
    # Executa o agente
    busca_result = await call_agent(agent_sommelier, entrada_do_agente_sommelier)
    return busca_result

async def async_function_agente_garimpeiro(topico, data_de_hoje):
    return await agente_garimpeiro(topico, data_de_hoje)

async def async_function_agente_sommelier(result_agent_agente_garimpeiro):
    return await agente_sommelier(result_agent_agente_garimpeiro)

# Configura√ß√£o inicial da p√°gina
st.set_page_config(page_title="Bot Beeer, seu agente cervejeiro", page_icon="ü§ñ", layout="wide")

# Inicializar o estado da sess√£o para armazenar o hist√≥rico
if "historico" not in st.session_state:
    st.session_state.historico = []
if "sessao_id" not in st.session_state:
    st.session_state.sessao_id = str(uuid.uuid4())

# Estiliza√ß√£o com CSS personalizado
st.markdown("""
<style>
    .chat-container {
        background-color: #f0f2f6;
        padding: 20px;
        border-radius: 10px;
        max-height: 500px;
        overflow-y: auto;
        margin-bottom: 20px;
    }
    .chat-message {
        padding: 10px;
        margin: 5px;
        border-radius: 5px;
        background-color: #ffffff;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    .user-message {
        background-color: #e6f3ff;
        text-align: right;
    }
    .agent-message {
        background-color: #d4edda;
    }
    .timestamp {
        font-size: 0.8em;
        color: #6c757d;
    }
    .stButton>button {
        background-color: #ff4b4b;
        color: white;
        border-radius: 5px;
    }
    .stButton>button:hover {
        background-color: #e63939;
    }
    .button-container {
        display: flex;
        justify-content: flex-end;
        margin-bottom: 10px;
    }
</style>
""", unsafe_allow_html=True)

# Criar duas colunas
col1, col2 = st.columns([1, 3], gap="small")  # Ajuste as propor√ß√µes se necess√°rio

# Colocar a imagem na primeira coluna
with col1:
    st.image("bot_beer_h180.png", caption="Bot Beer !", use_container_width=False)

# T√≠tulo do app
with col2:
    st.markdown(
        """
        <h1 style='margin-left: -5px; padding-left: 0;'>
        Bot Beer, seu agente cervejeiro üçªüçªüçª !
        </h1>
        """,
        unsafe_allow_html=True
    )
    #st.title("ü§ñ Chatbot Colaborativo com Dois Agentes")


# Bot√£o "Iniciar Nova Sess√£o" acima do formul√°rio, alinhado √† direita
with st.container():
    #st.markdown('<div class="button-container">', unsafe_allow_html=True)
    st.markdown(
        """
        <style>
        .stButton > button {
            float: right;
        }
        </style>
        """,
        unsafe_allow_html=True,
    )
    if st.button("Iniciar Nova Sess√£o"):
        st.session_state.historico = []
        st.session_state.sessao_id = str(uuid.uuid4())
        st.rerun()
    st.markdown('</div>', unsafe_allow_html=True)

# Formul√°rio para entrada do usu√°rio
with st.form(key="chat_form", clear_on_submit=True):
    st.markdown(
        """
        <style>
        .stButton > button {
            float: right;
        }
        </style>
        """,
        unsafe_allow_html=True,
    )
    user_input = st.text_area("Digite seu prompt:", height=100)
    submit_button = st.form_submit_button("Enviar")

# Container para exibir o hist√≥rico (mensagens mais recentes no topo)
with st.container():
    st.markdown('<div class="chat-container">', unsafe_allow_html=True)
    for mensagem in reversed(st.session_state.historico):
        if mensagem["tipo"] == "user":
            st.markdown(
                f'<div class="chat-message user-message"><strong>Voc√™:</strong> {mensagem["conteudo"]}<br><span class="timestamp">{mensagem["timestamp"]}</span></div>',
                unsafe_allow_html=True
            )
        elif mensagem["tipo"] == "agente_1":
            st.markdown(
                f'<div class="chat-message agent-message"><strong>Agente Analista:</strong> {mensagem["conteudo"]}<br><span class="timestamp">{mensagem["timestamp"]}</span></div>',
                unsafe_allow_html=True
            )
        elif mensagem["tipo"] == "agente_2":
            st.markdown(
                f'<div class="chat-message agent-message"><strong>Agente Insights:</strong> {mensagem["conteudo"]}<br><span class="timestamp">{mensagem["timestamp"]}</span></div>',
                unsafe_allow_html=True
            )
    st.markdown('</div>', unsafe_allow_html=True)


# Processar o input do usu√°rio
if submit_button and user_input:
    timestamp = datetime.now().strftime("%H:%M:%S")
    # Adicionar o prompt do usu√°rio ao hist√≥rico
    #st.session_state.historico.append({
    #    "tipo": "user",
    #    "conteudo": user_input,
    #    "timestamp": timestamp
    #})

    # Processar pelo Agente 1 (Analista de Texto)
    with st.spinner("Garimpando informa√ß√µes..."):
        time.sleep(1)  # Simula processamento
        result_agent_agente_garimpeiro = asyncio.run(async_function_agente_garimpeiro(user_input ,data_de_hoje))

    # Processar pelo Agente 2 (Gerador de Insights)
    with st.spinner("Processando experi√™ncias & alquimias..."):
        time.sleep(1)  # Simula processamento
        result_agent_sommelier = asyncio.run(async_function_agente_sommelier(result_agent_agente_garimpeiro))
        st.session_state.historico.append({
            "tipo": "agente_2",
            "conteudo": result_agent_sommelier,
            "timestamp": datetime.now().strftime("%H:%M:%S")
        })
        st.session_state.historico.append({
            "tipo": "agente_1",
            "conteudo": result_agent_agente_garimpeiro,
            "timestamp": datetime.now().strftime("%H:%M:%S")
        })
        # Adicionar o prompt do usu√°rio ao hist√≥rico
        st.session_state.historico.append({
            "tipo": "user",
            "conteudo": user_input,
            "timestamp": timestamp
        })


    # For√ßar re-render para exibir o hist√≥rico atualizado
    st.rerun()

# Rodap√© com informa√ß√µes
st.markdown("---")
st.markdown("¬©Ô∏è Powered by Fabyo Ramos !")